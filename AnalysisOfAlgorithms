public class AnalysisOfAlgorithms {

	//Time complexity
	
	//Max in array
	/**
	  	Algorithm arrayMax ( A , n )

		currentMax = A [ 0 ]			// There are 2 operations
		for i = 1 to ( n − 1) do 		// 1 operation
		if A[ i ] > currentMax then		// 2 operations with n-1
			currentMax = A [ i ] 		// 2 operations with n-1	// (2 + 2)(n-1) There are about 4(n - 1) operations
		return currentMax9				// 1 operation

			In total 4(n - 1) + 2 + 1 = (4n - 1) operations			
	 */
	
	//Selection Sort method
	/**
		public static int[] selectionSort(int[] arr) {
			for (i = 0 to n − 1) {
 				int indexOfCurrentMin = i ; 					// ≈ 1 × n
 				for (int j = i + 1 to n ) {
 					if(arr [j] < arr [indexOfCurrentMin] ) {
 						indexOfCurrentMin = j ;
 					} 											// ≈ 4 × (n − i) for each i
 				}
 				int currentMin = arr [indexOfCurrentMin]; 		// ≈ 2 × n
 				arr [indexOfCurrentMin] = arr [i] ; 			// ≈ 3 × n
 				arr[i] = currentMin ; 							// ≈ 2 × n
 			}
 			return arr ; 										// ≈ 1
 		}
 											n - 1
		In total, it will be 1 + 8n + 4 * SUMMATION(n - i) **sum from i = 0 to n - 1 for (n - i)
											i = 0
	 */
	
	
	public static void main(String[] args) {
		
		
	}

}
