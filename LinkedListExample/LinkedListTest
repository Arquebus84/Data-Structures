public class LinkedListTest{
    public static void main(String[] args){

        SinglyLinkedList<Integer> singleL = new SinglyLinkedList<>();

    }
}

class Node<E>{
    E element;
    Node<E> next;

    public Node(E element, Node<E> nextAddress){
        this.element = element;
        this.next = nextAddress;
    }

    public E getElement(){ return element;  }
    public Node<E> getNextNode(){ return next; }
    public void setNextNode(Node<E> nextAddress){ this.next = nextAddress; }
}

class SinglyLinkedList<E>{
    private Node<E> head = null ;
    private Node<E> tail = null;
    /** Number o f nodes i n the l i s t */
    private int size = 0;

    public int getSize(){ return size; }
    public boolean isEmpty(){
        return true;
    }
    public E first(){ return head.getElement(); }
    public E last(){ return tail.getElement(); }
    public void addFirst (E e){

    }
    public void addLast(E e){

    }
    public E removeFirst(){
        E headValue = head.getElement();
        return headValue;
    }
}

class DoublyLinkedList<E>{
    private Node<E> head = null ;
    private Node<E> tail = null;
    /** Number o f nodes i n the l i s t */
    private int size = 0;

    public int getSize(){ return size; }
    public boolean isEmpty(){
        return true;
    }
    public E first(){ return head.getElement(); }
    public E last(){ return tail.getElement(); }
    public void addFirst (E e){

    }
    public void addLast(E e){

    }
    public void addBetween(E e, Node<E> predecessor, Node<E> successor){

    }
    public E removeLast(){
        E tailValue = tail.getElement();
        return tailValue;
    }
}
